@page "/product"
@page "/product/{id:int}"
@using BlazorHostingWithServer.Client.Repository
@inject IProductService service;
@inject NavigationManager manager;
@inject IJSRuntime jsRuntime
@if (Id == null)
{
    <PageTitle>Create New Product</PageTitle>
    <h3>Create New Product</h3>
}
else
{
    <PageTitle>Edit @product.Title</PageTitle>
    <h3>Edit @product.Title</h3>
}
<EditForm Model="product" OnSubmit="HandleSubmit">
    <div>
        <label for="title">Title</label>
        <InputText id="title" @bind-Value="product.Title" class="form-control"/>
    </div>
    <div>
        <label for="category">Category</label>
        <InputText id="category" @bind-Value="product.Category" class="form-control" />
    </div>
    <div>
        <label for="price">Price</label>
        <InputNumber id="price" @bind-Value="product.Price" class="form-control" />
    </div><br />
    <button type="submit" class="btn btn-primary">@btnText</button>
    <button @onclick="DeleteProduct" type="button" class="btn btn-danger">Delete Product</button>
    <button class="btn btn-primary" type="button" @onclick="GoToList">Back To List</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    string btnText = string.Empty;
    new BlazorHostingWithServer.Shared.Product product = new BlazorHostingWithServer.Shared.Product { Title = "New Product" };
    protected override void OnInitialized()
    {
        btnText = Id == null ? "Save New Product" : "Update Product";
    }
    protected override async Task OnParametersSetAsync()
    {
        if(Id != null)
        {
            var result = await service.GetProductById((int)Id);
            if (result != null)
            {
                product = result;
            }
            else
                manager.NavigateTo("/product");
        }
    }
    async Task GoToList()
    {
        manager.NavigateTo("/products");
    }
    async Task DeleteProduct()
    {
        bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure to delete the record");
        if (confirmed)
        {
            await service.DeleteProduct(product.Id);
        }
       
    }
    async Task HandleSubmit()
    {
        if (Id is null)
        {
            await service.CreateProduct(product);
        }
        else
        {
            await service.UpdateProduct((int)Id, product);
        }
    }
}
